{"version":3,"sources":["images/squid.svg","images/save.svg","images/sound.svg","images/resume.svg","Player/Name.tsx","Player/Input.tsx","images/index.ts","Player/PlayerIcon.tsx","Player/Player.tsx","Players.tsx","Add.tsx","NavBar.tsx","App.tsx","serviceWorker.ts","store/PlayerStore.ts","store/GameStore.ts","store/index.ts","index.tsx"],"names":["module","exports","Name","props","style","fontWeight","fontSize","name","Input","displayPoints","document","getElementById","value","points","toString","addPoints","inputPoints","parseInt","isNaN","setPoints","useEffect","useState","arePointsSet","pointsAreSet","className","type","id","onFocus","e","onKeyPress","key","preventDefault","onBlur","squid","require","saveIcon","sound","resume","PlayerIcon","width","onChange","setImage","image","src","URL","createObjectURL","onClick","click","Player","tableLayout","textAlign","paddingLeft","Players","observer","store","useContext","GlobalStore","players","slice","sort","a","b","map","player","i","changeImage","Add","padding","addPlayer","height","alt","cursor","NavBar","console","log","color","GameStore","numberOfGames","length","margin","App","paddingBottom","overflow","Boolean","window","location","hostname","match","gamesPlayed","pointsHistory","this","addToHistory","push","file","target","files","decorate","action","bound","observable","PlayerStore","playerName","prompt","playerExists","input","find","createContext","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kMAAAA,EAAOC,QAAU,IAA0B,mC,gBCA3CD,EAAOC,QAAU,IAA0B,kC,gBCA3CD,EAAOC,QAAU,IAA0B,mC,gBCA3CD,EAAOC,QAAU,IAA0B,oC,4FCe5BC,G,iBARe,SAACC,GAC3B,OACI,yBAAKC,MAAO,CAAEC,WAAY,IAAKC,SAAU,UACpCH,EAAMI,Q,OC2CJC,EA5CgB,SAACL,GAC5B,IAAMM,EAAgB,WACjBC,SAASC,eAAeR,EAAMI,MAA2BK,MAAQT,EAAMU,OAAOC,YAG7EC,EAAY,WACd,IAAIC,EAAcC,SAAUP,SAASC,eAAeR,EAAMI,MAA2BK,OAChFM,MAAMF,IACPb,EAAMgB,UAAUH,IAIxBI,qBAAU,WACNX,OAbkC,MAiBDY,oBAAS,GAjBR,mBAiB/BC,EAjB+B,KAiBjBC,EAjBiB,KAmBtC,OACI,2BAAOC,UAAU,QAAQC,KAAK,SAASC,GAAIvB,EAAMI,KAC7CoB,QAAS,SAACC,GAASlB,SAASC,eAAeR,EAAMI,MAA2BK,MAAQ,IACpFiB,WACI,SAACD,GACiB,UAAVA,EAAEE,KACFP,GAAa,GACbR,IACAa,EAAEG,kBAGFR,GAAa,IAGzBS,OAAQ,SAACJ,GACAN,IACDP,IACAQ,GAAa,IAEjBd,QC/CVwB,EAAQC,EAAQ,IAChBC,EAAWD,EAAQ,IACnBE,EAAQF,EAAQ,IAChBG,EAASH,EAAQ,IC6BRI,EAtBqB,SAACnC,GACjC,OACI,yBAAKC,MAAO,CAACmC,MAAM,WACf,2BACIf,UAAU,kBACVC,KAAK,OACLe,SAAU,SAACZ,GACPzB,EAAMsC,SAASb,IAEnBF,GAAE,UAAKvB,EAAMI,KAAX,UAGLJ,EAAMuC,MAED,yBAAKlB,UAAU,WAAWmB,IAAKC,IAAIC,gBAAgB1C,EAAMuC,OAAQI,QAAS,kBAAMpC,SAASC,eAAT,UAA2BR,EAAMI,KAAjC,SAA8CwC,WAE9H,yBAAKJ,IAAKV,EAAOa,QAAS,kBAAMpC,SAASC,eAAT,UAA2BR,EAAMI,KAAjC,SAA8CwC,aCZnFC,EAAgC,SAAC7C,GAE1C,OACI,2BAAOC,MAAO,CAAEmC,MAAO,OAAQU,YAAY,UACvC,+BACI,4BACI,wBAAI7C,MAAO,CAAEmC,MAAO,QAChB,kBAAC,EAAD,CAAYE,SAAUtC,EAAMsC,SAAUC,MAAOvC,EAAMuC,MAAOnC,KAAMJ,EAAMI,QAE1E,wBAAIH,MAAO,CAAEmC,MAAO,MAAOW,UAAW,SAAUC,YAAY,UACxD,kBAAC,EAAD,CAAM5C,KAAMJ,EAAMI,QAEtB,wBAAIH,MAAO,CAAEmC,MAAO,QAChB,kBAAC,EAAD,CAAO1B,OAAQV,EAAMU,OAAQM,UAAWhB,EAAMgB,UAAWZ,KAAMJ,EAAMI,Y,OCtBhF6C,EAAoBC,aAAS,WACxC,IAAMC,EAAQC,qBAAWC,GAAaJ,QACtC,OACE,6BACGE,EAAMG,QACJC,QACAC,MAAK,SAACC,EAAGC,GAAJ,OAAWD,EAAE/C,OAASgD,EAAEhD,QAAU,EAAI,KAC3CiD,KAAI,SAACC,EAAQC,GAAT,OACH,kBAAC,EAAD,CACEzD,KAAMwD,EAAOxD,KACbM,OAAQkD,EAAOlD,OACfM,UAAW4C,EAAOhD,UAClBe,IAAKkC,EACLvB,SAAUsB,EAAOE,YACjBvB,MAAOqB,EAAOrB,eCfbwB,EAAgBb,aAAS,WACpC,IAAMC,EAAQC,qBAAWC,GAEzB,OACE,yBAAKpD,MAAO,CAAE8C,UAAW,SAAUiB,QAAS,SAC1C,yBACErB,QAAS,WAAQQ,EAAMF,QAAQgB,aAC/BzB,IAAK,oDACL0B,OAAO,OACPC,IAAI,WACJlE,MAAO,CAAEmE,OAAQ,iBCRZC,G,MAASnB,aAAS,WAC7B,IAAMC,EAAQC,qBAAWC,GACzB,OACE,yBAAKhC,UAAU,SAASsB,QAAS,WAAQ2B,QAAQC,IAAI,QACnD,yBAAKtE,MAAO,CAAE8C,UAAW,SAAUiB,QAAS,aAC1C,yBAAK/D,MAAO,CAAEE,SAAU,OAAQqE,MAAO,YAAa,2BAAIrB,EAAMsB,UAAUC,gBACxE,uBAAGzE,MAAO,CAAEE,SAAU,OAAQqE,MAAO,YAArC,iBAEDrB,EAAMF,QAAQK,QAAQqB,OAAS,EAC5B,yBAAK1E,MAAO,CAAE2E,OAAQ,SAAU,yBAAKT,IAAI,KAAK3B,IAAKR,KACnD,yBAAK/B,MAAO,CAAE2E,OAAQ,SAAU,yBAAKT,IAAI,MAAM3B,IAAKN,KACxD,yBAAKjC,MAAO,CAAE+D,QAAS,aAAc,yBAAKG,IAAI,KAAK3B,IAAKP,UCS/C4C,EAZI,WACjB,OACE,6BACE,yBAAK5E,MAAO,CAAE6E,cAAe,MAAOC,SAAU,WAC5C,kBAAC9B,EAAD,MACA,kBAACc,EAAD,OAEF,kBAACM,EAAD,QCTcW,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,yBChBOvC,EAAb,WACI,WAAYzC,GAAe,yBAI3BA,UAJ0B,OAK1BM,OAAS,EALiB,KAM1B2E,YAAsB,EANI,KAO1B9C,WAP0B,OAQ1B+C,cAA+B,GAP3BC,KAAKnF,KAAOA,EAFpB,sDAWcM,GACN6E,KAAKC,aAAa9E,GAClB6E,KAAK7E,QAAUA,IAbvB,mCAgBiBA,GACT6E,KAAKD,cAAcG,KAAK/E,KAjBhC,kCAoBgBe,GACR,IAAIiE,EAAOjE,EAAEkE,OAAOC,MAAO,GAC3BL,KAAKhD,MAAQmD,MAtBrB,KAyBAG,YAAShD,EAAQ,CACbiB,YAAagC,IAAOC,MACpBnF,UAAWkF,IAAOC,MAClB3F,KAAM4F,IACNtF,OAAQsF,IACRX,YAAaW,IACbzD,MAAOyD,M,IAGUC,E,iDACjB3C,QAAyB,G,wDAGrB,IAAI4C,EAAaC,OAAO,0BAA2B,IAE/CD,IAAeX,KAAKa,aAAaF,IACjCX,KAAKjC,QAAQmC,KAAK,IAAI5C,EAAOqD,M,mCAOxBG,GACT,QAAId,KAAKjC,QAAQgD,MAAK,SAAC1C,GAAD,OAAYA,EAAOxD,OAASiG,S,KAS1DR,YAASI,EAAa,CAClB3C,QAAS0C,IACT/B,UAAW6B,IAAOC,QC9Df,IAAMtB,EAAb,sCACIC,cAAwB,GCYbvB,EADH,IANR,aAAe,yBAFfF,aAEc,OADdwB,eACc,EACVc,KAAKtC,QAAU,IAAIgD,EACnBV,KAAKd,UAAY,IAAIA,GCDd8B,oCAAclD,GAE7BmD,IAASC,OAAO,kBAAC,EAAD,MAASlG,SAASC,eAAe,SJgI3C,kBAAmBkG,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.7fab3c8f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/squid.b5a3cbe1.svg\";","module.exports = __webpack_public_path__ + \"static/media/save.41cfeb42.svg\";","module.exports = __webpack_public_path__ + \"static/media/sound.eea00df5.svg\";","module.exports = __webpack_public_path__ + \"static/media/resume.c76c27fb.svg\";","import React from 'react'\nimport '../css/player.css'\n\ninterface props {\n    name: string\n}\n\nconst Name: React.FC<props> = (props) => {\n    return (\n        <div style={{ fontWeight: 600, fontSize: \"5vmax\" }}>\n            {props.name}\n        </div>\n    )\n}\n\nexport default Name","import React, { useEffect, useState } from 'react'\nimport '../css/player.css'\n\ninterface props {\n    name: string\n    setPoints: Function\n    points: number\n}\n\nconst Input: React.FC<props> = (props) => {\n    const displayPoints = () => {\n        (document.getElementById(props.name) as HTMLInputElement).value = props.points.toString()\n    }\n\n    const addPoints = () => {\n        let inputPoints = parseInt((document.getElementById(props.name) as HTMLInputElement).value)\n        if (!isNaN(inputPoints)) {\n            props.setPoints(inputPoints)\n        }\n    }\n\n    useEffect(() => {\n        displayPoints()\n    })\n\n    // This is to prevent adding twice when you press enter and then 'onBlur'\n    const [arePointsSet, pointsAreSet] = useState(false)\n\n    return (\n        <input className=\"input\" type=\"number\" id={props.name}\n            onFocus={(e) => { (document.getElementById(props.name) as HTMLInputElement).value = '' }}\n            onKeyPress={\n                (e) => {\n                    if (e.key === 'Enter') {\n                        pointsAreSet(true);\n                        addPoints()\n                        e.preventDefault()\n                    }\n                    else {\n                        pointsAreSet(false)\n                    }\n                }}\n            onBlur={(e: any) => {\n                if (!arePointsSet) {\n                    addPoints();\n                    pointsAreSet(false)\n                }\n                displayPoints()\n            }\n            }\n        />\n    )\n}\nexport default Input\n","const squid = require('./squid.svg') as string;\nconst saveIcon = require('./save.svg') as string;\nconst sound = require('./sound.svg') as string;\nconst resume = require('./resume.svg') as string;\nexport { squid, saveIcon, sound, resume }","import React from 'react'\nimport { squid } from '../images'\nimport '../css/player.css'\n\ninterface props {\n    image?: File | undefined\n    setImage: Function\n    name: string\n}\n\nconst PlayerIcon: React.FC<props> = (props) => {\n    return (\n        <div style={{width:\"13vmax\"}}>\n            <input\n                className=\"visually-hidden\"\n                type=\"file\"\n                onChange={(e: any) => {\n                    props.setImage(e)\n                }}\n                id={`${props.name}icon`}\n            />\n\n            {props.image\n                // eslint-disable-next-line\n                ? <img className=\"uploaded\" src={URL.createObjectURL(props.image)} onClick={() => document.getElementById(`${props.name}icon`)!.click()} />\n                // eslint-disable-next-line\n                : <img src={squid} onClick={() => document.getElementById(`${props.name}icon`)!.click()} />}\n\n        </div>\n    )\n}\n\nexport default PlayerIcon","import React from 'react'\nimport Name from './Name'\nimport Input from './Input'\nimport PlayerIcon from './PlayerIcon'\nimport '../css/player.css'\n\ninterface PlayerProps {\n    name: string;\n    points: number;\n    setPoints: Function;\n    setImage: Function;\n    image?: File | undefined\n}\n\nexport const Player: React.FC<PlayerProps> = (props) => {\n\n    return (\n        <table style={{ width: \"100%\", tableLayout:\"fixed\" }}>\n            <tbody>\n                <tr>\n                    <td style={{ width: \"25%\" }}>\n                        <PlayerIcon setImage={props.setImage} image={props.image} name={props.name} />\n                    </td>\n                    <td style={{ width: \"50%\", textAlign: \"center\", paddingLeft:\"5vmin\" }}>\n                        <Name name={props.name} />\n                    </td>\n                    <td style={{ width: \"25%\" }}>\n                        <Input points={props.points} setPoints={props.setPoints} name={props.name} />\n                    </td>\n                </tr>\n            </tbody>\n        </table>\n    );\n}","import React, { useContext } from \"react\";\nimport GlobalStore from \"./index\";\nimport { Player } from \"./Player/Player\";\nimport { observer } from \"mobx-react\";\n\nexport const Players: React.FC = observer(() => {\n  const store = useContext(GlobalStore).Players;\n  return (\n    <div>\n      {store.players\n        .slice()\n        .sort((a, b) => (a.points < b.points ? -1 : 1))\n        .map((player, i) => (\n          <Player\n            name={player.name}\n            points={player.points}\n            setPoints={player.addPoints}\n            key={i}\n            setImage={player.changeImage}\n            image={player.image}\n          />\n        ))}\n    </div>\n  );\n});\n","import React, { useContext } from \"react\";\nimport { observer } from \"mobx-react\";\nimport GlobalStore from \"./index\";\n\nexport const Add: React.FC = observer(() => {\n  const store = useContext(GlobalStore);\n\n  return (\n    <div style={{ textAlign: \"center\", padding: \"10px\" }}>\n      <img\n        onClick={() => { store.Players.addPlayer(); }}\n        src={\"https://image.flaticon.com/icons/svg/25/25304.svg\"}\n        height=\"60em\"\n        alt=\"plusIcon\"\n        style={{ cursor: \"pointer\" }}\n      />\n    </div>\n  );\n});\n","import React, { useContext } from 'react'\nimport './css/navbar.css'\nimport { saveIcon, sound, resume } from './images'\nimport GlobalStore from './index'\nimport { observer } from 'mobx-react'\n\nexport const NavBar = observer(() => {\n  const store = useContext(GlobalStore)\n  return (\n    <div className=\"navbar\" onClick={() => { console.log(\"hi\"); }}>\n      <div style={{ textAlign: 'center', padding: '0px 20px' }}>\n        <div style={{ fontSize: '25px', color: '#686868' }}><b>{store.GameStore.numberOfGames}</b></div>\n        <b style={{ fontSize: '12px', color: '#686868' }}>№ Games</b>\n      </div>\n      {store.Players.players.length > 0\n        ? <div style={{ margin: \"auto\" }}><img alt=\"hi\" src={saveIcon} /></div>\n        : <div style={{ margin: \"auto\" }}><img alt=\"hi1\" src={resume} /></div>}\n      <div style={{ padding: \"0px 20px\" }}><img alt=\"ho\" src={sound} /></div>\n    </div>\n  )\n})","import React from \"react\";\nimport \"./css/App.css\";\n\nimport { Players } from \"./Players\";\nimport { Add } from \"./Add\";\nimport { NavBar } from \"./NavBar\";\n\nexport interface PlayersContextInterface {\n  name: string;\n  points: number;\n  gamesPlayed: number;\n  image: File | undefined;\n}\n\nexport const App = () => {\n  return (\n    <div>\n      <div style={{ paddingBottom: \"8vh\", overflow: \"scroll\" }}>\n        <Players />\n        <Add />\n      </div>\n      <NavBar />\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { observable, decorate, action } from 'mobx';\n\nexport class Player {\n    constructor(name: string) {\n        this.name = name\n    }\n\n    name: string;\n    points = 0;\n    gamesPlayed: number = 0;\n    image: File | undefined;\n    pointsHistory: Array<number> = []\n\n    addPoints(points: number) {\n        this.addToHistory(points)\n        this.points += points;\n    }\n\n    addToHistory(points: number) {\n        this.pointsHistory.push(points)\n    }\n\n    changeImage(e: any) {\n        let file = e.target.files![0]\n        this.image = file\n    }\n}\ndecorate(Player, {\n    changeImage: action.bound,\n    addPoints: action.bound,\n    name: observable,\n    points: observable,\n    gamesPlayed: observable,\n    image: observable,\n})\n\nexport default class PlayerStore {\n    players: Array<Player> = []\n\n    addPlayer() {\n        var playerName = prompt('Please enter your name:', '')!\n\n        if (playerName && !this.playerExists(playerName)) {\n            this.players.push(new Player(playerName))\n        }\n        else {\n            return\n        }\n    }\n\n    playerExists(input: string) {\n        if (this.players.find((player) => player.name === input)) {\n            return true\n        }\n        else {\n            return false\n        }\n    }\n}\n\ndecorate(PlayerStore, {\n    players: observable,\n    addPlayer: action.bound\n})\n","export class GameStore {\n    numberOfGames: number = 0\n}","import PlayerStore from './PlayerStore'\nimport { GameStore } from './GameStore'\n\nclass GlobalStore {\n    Players: PlayerStore;\n    GameStore: GameStore;\n    constructor() {\n        this.Players = new PlayerStore()\n        this.GameStore = new GameStore()\n    }\n}\n\nlet store = new GlobalStore()\nexport default store","import React, { createContext } from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport GlobalStore from './store'\n\nexport default createContext(GlobalStore)\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}