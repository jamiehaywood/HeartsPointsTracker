{"version":3,"sources":["Player/Name.tsx","Player/Input.tsx","images/Plus.tsx","images/Resume.tsx","images/Save.tsx","images/Squid.tsx","images/Sound.tsx","Player/PlayerIcon.tsx","Player/Player.tsx","Players.tsx","NavBar.tsx","constants/colourConst.ts","store/PlayerStore.ts","store/GameStore.ts","store/index.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["Name","props","name","style","fontWeight","fontSize","includes","length","Input","displayPoints","document","getElementById","value","points","toString","addPoints","inputPoints","parseInt","isNaN","setPoints","useEffect","useState","arePointsSet","pointsAreSet","className","type","id","onFocus","e","onKeyPress","key","preventDefault","onBlur","Plus","width","viewBox","onClick","fill","opacity","d","Resume","Save","Squid","transform","Sound","PlayerIcon","accept","onChange","setImage","image","src","URL","createObjectURL","click","Player","tableLayout","textAlign","paddingLeft","pointsColour","Players","observer","store","useContext","GlobalStore","players","slice","sort","a","b","map","player","i","changeImage","NavBar","iconPresets","color","label","GameStore","numberOfGames","margin","NavIcon","display","padding","children","marginTop","gamesPlayed","pointsHistory","this","addToHistory","push","file","target","files","decorate","action","bound","observable","PlayerStore","playerName","prompt","playerExists","input","find","addPlayer","App","paddingBottom","overflow","Boolean","window","location","hostname","match","createContext","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5f380fd6.chunk.js","sourcesContent":["import React from 'react'\nimport './player.scss'\n\ninterface props {\n    name: string\n}\n\nconst Name: React.FC<props> = (props) => {\n    function calculateFontSize(name: string) {\n        // If the name is split with a space, then can fit over two lines\n        if (name.includes(' ')) {\n            return \"8vw\"\n        }\n        // else name needs to be shrunk to keep on one line\n        else return name.length > 10 ? \"6vw\" : \"8vw\"\n    }\n\n    const style = {\n        fontWeight: 600,\n        fontSize: calculateFontSize(props.name)\n    }\n\n    return (\n        <div style={style}>\n            {props.name}\n        </div>\n    )\n}\n\nexport default Name","import React, { useEffect, useState } from 'react'\nimport './player.scss'\n\ninterface props {\n    name: string\n    setPoints: Function\n    points: number\n    pointsColour?: string\n}\n\nconst Input: React.FC<props> = (props) => {\n    const displayPoints = () => {\n        (document.getElementById(props.name) as HTMLInputElement).value = props.points.toString()\n    }\n\n    const addPoints = () => {\n        let inputPoints = parseInt((document.getElementById(props.name) as HTMLInputElement).value)\n        if (!isNaN(inputPoints)) {\n            props.setPoints(inputPoints)\n        }\n    }\n\n    useEffect(() => {\n        displayPoints()\n    })\n\n    // This is to prevent adding twice when you press enter and then 'onBlur'\n    const [arePointsSet, pointsAreSet] = useState(false)\n\n    return (\n        <input className=\"input\" type=\"number\" id={props.name}\n            onFocus={(e) => { (document.getElementById(props.name) as HTMLInputElement).value = '' }}\n            onKeyPress={\n                (e) => {\n                    if (e.key === 'Enter') {\n                        pointsAreSet(true);\n                        addPoints()\n                        e.preventDefault()\n                    }\n                    else {\n                        pointsAreSet(false)\n                    }\n                }}\n            onBlur={(e: any) => {\n                if (!arePointsSet) {\n                    addPoints();\n                    pointsAreSet(false)\n                }\n                displayPoints()\n            }\n            }\n        />\n    )\n}\nexport default Input\n","import React, { SVGProps } from 'react'\n\nconst Plus: React.FC<SVGProps<SVGSVGElement>> = (props) => {\n    return (\n        <svg width={props.width} viewBox=\"0 0 256 256\" onClick={props.onClick} className={props.className}>\n            <path fill={props.fill} opacity=\"1.00\" d=\" M 116.47 12.68 C 141.76 10.14 167.85 16.10 189.39 29.62 C 212.70 44.10 230.56 67.13 238.62 93.37 C 246.42 118.24 245.49 145.72 236.04 170.01 C 225.90 196.41 205.66 218.74 180.40 231.44 C 156.70 243.57 128.73 247.06 102.77 241.19 C 78.62 235.86 56.35 222.51 40.24 203.75 C 21.68 182.49 11.55 154.19 12.13 126.00 C 12.49 97.70 23.69 69.69 43.09 49.06 C 62.02 28.51 88.66 15.35 116.47 12.68 M 116.42 24.66 C 89.17 27.63 63.34 41.86 46.41 63.43 C 31.12 82.68 23.16 107.51 24.22 132.06 C 25.10 156.73 35.14 180.96 52.08 198.94 C 66.58 214.65 86.07 225.64 107.02 229.90 C 130.06 234.67 154.71 231.37 175.62 220.55 C 198.69 208.80 216.93 188.01 225.64 163.64 C 233.75 141.34 233.95 116.28 226.18 93.86 C 218.68 71.84 203.49 52.58 183.80 40.20 C 163.97 27.55 139.79 21.98 116.42 24.66 Z\" />\n            <path fill={props.fill} opacity=\"1.00\" d=\" M 124.27 85.25 C 127.59 82.48 133.60 84.60 133.84 89.10 C 134.29 100.04 133.80 111.01 134.04 121.96 C 144.05 122.09 154.06 121.95 164.07 121.98 C 166.21 122.04 168.69 122.02 170.26 123.73 C 172.74 126.13 172.50 130.66 169.73 132.74 C 168.14 134.02 165.99 133.94 164.07 134.02 C 154.06 134.05 144.05 133.91 134.04 134.04 C 133.79 144.99 134.29 155.96 133.84 166.90 C 133.59 171.39 127.59 173.52 124.27 170.74 C 122.12 169.25 121.98 166.44 121.98 164.07 C 121.95 154.06 122.09 144.05 121.96 134.04 C 111.95 133.91 101.94 134.05 91.93 134.02 C 89.56 134.01 86.76 133.87 85.26 131.73 C 82.47 128.41 84.59 122.39 89.10 122.15 C 100.04 121.72 111.01 122.20 121.96 121.96 C 122.09 111.95 121.95 101.94 121.98 91.93 C 121.98 89.56 122.12 86.75 124.27 85.25 Z\" />\n        </svg>\n    )\n}\n\nexport default Plus","import React, { SVGProps } from 'react'\n\nconst Resume: React.FC<SVGProps<SVGSVGElement>> = (props) => {\n    return (\n        <svg width={props.width} viewBox=\"0 0 321 321\">\n            <path fill={props.fill} opacity=\"1.00\" d=\" M 171.99 29.91 C 190.22 26.95 209.39 30.45 225.47 39.52 C 243.02 49.25 256.79 65.53 263.57 84.41 C 267.46 94.74 268.60 105.82 268.42 116.79 C 273.16 118.48 278.27 118.97 282.91 121.02 C 299.07 127.39 312.20 141.47 316.58 158.38 C 320.79 173.73 317.78 190.77 308.92 203.93 C 298.90 219.10 281.27 229.00 263.04 229.24 C 244.01 229.31 224.97 229.23 205.94 229.29 C 202.80 229.40 198.94 228.63 197.80 225.26 C 196.03 221.20 199.55 216.37 203.93 216.59 C 223.94 216.30 243.96 216.71 263.97 216.42 C 281.68 215.87 298.13 203.30 303.47 186.43 C 307.17 175.51 306.28 163.21 301.09 152.93 C 295.09 140.78 283.18 131.64 269.78 129.37 C 266.39 128.76 262.92 128.78 259.55 128.08 C 257.16 127.62 255.35 125.32 255.34 122.91 C 255.17 119.60 255.63 116.30 255.67 112.99 C 255.98 95.82 249.51 78.70 238.19 65.83 C 228.08 54.23 214.10 46.06 199.00 43.05 C 180.74 39.23 161.00 43.03 145.52 53.47 C 133.89 61.18 124.58 72.36 119.25 85.28 C 117.97 88.45 116.01 92.35 112.00 92.23 C 108.71 91.71 106.43 88.99 103.80 87.19 C 95.90 81.09 84.91 79.52 75.45 82.47 C 65.03 85.56 56.61 94.53 54.10 105.09 C 53.10 109.14 53.62 113.42 52.37 117.41 C 50.99 120.23 47.51 120.76 44.89 121.90 C 28.70 127.43 16.31 142.39 13.52 159.22 C 10.88 173.40 14.95 188.67 24.45 199.54 C 33.22 209.82 46.39 216.30 59.94 216.46 C 77.31 216.57 94.68 216.49 112.04 216.47 C 113.90 216.55 115.85 216.52 117.60 217.27 C 121.87 219.03 122.12 225.92 118.20 228.20 C 116.02 229.40 113.43 229.22 111.04 229.32 C 94.35 229.20 77.67 229.30 60.99 229.26 C 44.73 229.24 28.67 222.29 17.41 210.59 C 7.30 200.41 1.43 186.58 0.00 172.40 L 0.00 164.60 C 1.11 145.70 11.49 127.70 27.36 117.35 C 31.42 114.47 36.18 112.83 40.45 110.32 C 41.34 107.99 41.58 105.49 42.15 103.08 C 44.79 90.07 53.81 78.59 65.72 72.78 C 76.17 67.61 88.90 66.71 99.72 71.30 C 103.24 72.70 106.35 74.90 109.81 76.42 C 111.62 73.94 112.89 71.13 114.52 68.53 C 126.96 48.24 148.37 33.46 171.99 29.91 Z\" />\n            <path fill={props.fill} opacity=\"1.00\" d=\" M 157.38 159.35 C 161.20 157.93 165.55 161.18 165.51 165.20 C 165.80 202.41 165.29 239.64 165.76 276.84 C 173.35 270.46 179.71 262.74 187.09 256.14 C 190.55 252.78 196.86 255.38 197.39 260.03 C 198.27 263.72 194.93 266.32 192.70 268.70 C 181.40 279.58 170.78 291.20 159.15 301.72 C 147.41 290.86 136.49 279.12 125.00 267.99 C 122.66 265.73 119.73 262.75 121.02 259.18 C 122.16 254.68 128.45 253.01 131.66 256.40 C 138.92 263.08 145.43 270.58 152.81 277.14 C 152.94 240.41 152.83 203.67 152.86 166.93 C 152.61 163.77 154.10 160.26 157.38 159.35 Z\" />\n        </svg>\n    )\n}\n\nexport default Resume","import React, { SVGProps } from 'react'\n\nconst Save: React.FC<SVGProps<SVGSVGElement>> = (props) => {\n    return (\n        <svg width={props.width} viewBox=\"0 0 200 200\">\n            <path fill={props.fill} opacity=\"1.00\" d=\" M 110.56 18.59 C 127.09 16.59 144.26 23.31 155.20 35.82 C 164.30 45.79 168.95 59.40 168.60 72.83 C 175.18 74.32 181.86 76.45 187.00 81.02 C 194.70 87.23 199.22 96.75 200.00 106.54 L 200.00 110.49 C 199.15 119.53 195.29 128.35 188.51 134.50 C 182.16 140.35 173.64 143.85 164.99 143.85 C 153.30 143.92 141.62 143.84 129.93 143.89 C 128.34 143.75 126.35 144.16 125.27 142.66 C 123.46 141.15 123.99 138.10 125.80 136.81 C 127.39 136.04 129.20 136.00 130.93 135.93 C 142.64 135.83 154.37 136.14 166.08 135.80 C 179.52 135.35 191.43 123.55 191.75 110.07 C 192.70 99.17 186.25 88.24 176.37 83.63 C 172.14 81.28 167.21 81.35 162.62 80.31 C 159.72 79.19 160.29 75.51 160.37 73.04 C 161.33 59.70 155.56 46.23 145.54 37.44 C 137.27 30.11 126.18 25.82 115.08 26.34 C 99.81 26.40 85.04 35.23 77.53 48.48 C 75.84 51.26 75.00 54.56 72.85 57.05 C 69.54 59.40 66.62 55.58 63.94 54.05 C 53.77 47.17 38.06 52.58 34.55 64.45 C 32.88 68.19 34.93 74.33 29.99 75.93 C 24.47 77.89 19.20 80.88 15.44 85.48 C 6.99 94.93 5.82 109.88 12.26 120.71 C 17.44 129.82 27.61 135.73 38.07 135.87 C 48.74 136.07 59.42 135.83 70.09 135.96 C 71.68 136.11 73.60 135.97 74.72 137.36 C 77.24 139.48 75.25 144.18 71.94 143.79 C 60.95 144.00 49.96 143.82 38.97 143.87 C 26.84 144.10 14.86 138.08 7.70 128.31 C 2.86 122.09 0.58 114.29 0.00 106.51 L 0.00 103.46 C 0.74 88.24 11.07 74.35 25.29 69.02 C 26.39 60.37 30.78 52.00 38.36 47.37 C 47.45 41.34 59.64 41.89 68.88 47.30 C 76.96 31.66 92.86 20.10 110.56 18.59 Z\" />\n            <path fill={props.fill} opacity=\"1.00\" d=\" M 79.13 107.15 C 86.12 100.25 92.95 93.19 100.00 86.37 C 107.05 93.19 113.88 100.25 120.86 107.14 C 122.11 108.54 124.00 109.88 123.75 112.00 C 124.14 115.36 119.48 117.07 117.26 114.74 C 112.57 110.72 108.61 105.92 103.96 101.83 C 104.17 124.23 104.05 146.64 104.08 169.05 C 103.88 170.95 104.36 173.35 102.67 174.72 C 101.02 176.75 97.28 175.92 96.50 173.46 C 95.89 171.73 95.95 169.85 95.90 168.04 C 95.96 145.97 95.84 123.90 96.03 101.83 C 91.41 105.94 87.38 110.67 82.77 114.79 C 80.81 116.79 76.55 115.77 76.32 112.77 C 75.68 110.45 77.73 108.67 79.13 107.15 Z\" />\n        </svg>\n    )\n}\n\nexport default Save","import React, { SVGProps } from 'react'\n\nconst Squid: React.FC<SVGProps<SVGSVGElement>> = (props) => {\n    return (\n        <svg viewBox=\"0 0 1000 1000\" fill={props.fill} width={props.width}>\n            <g><g onClick={props.onClick} transform=\"translate(0.000000,511.000000) scale(0.100000,-0.100000)\"><path d=\"M4313.7,4650.5c-1147.7-201.3-1892.9-816.9-2132-1761.4c-103.6-404.5-115.6-882.7-29.9-1155.7c23.9-75.7,75.7-205.2,115.6-284.9c67.8-137.5,137.5-235.1,538-755.2C2982.7,464.2,3126.1,195.2,3170,9.9c35.9-149.4,29.9-516.1-10-685.4c-127.5-536-518.1-809-1117.8-785.1c-326.8,13.9-655.5,159.4-892.6,396.5c-171.4,173.3-269,424.4-241.1,623.6c41.8,290.9,185.3,546,514.1,906.6c217.2,239.1,235.1,354.7,79.7,536c-91.7,107.6-161.4,143.5-282.9,143.5c-360.6,0-858.8-625.6-1054.1-1323c-73.7-267-87.7-693.4-27.9-930.5c83.7-334.7,255.1-613.7,534-872.7c655.5-613.7,1598-840.8,2072.2-500.1c47.8,33.9,85.7,53.8,85.7,45.8c0-39.9-151.4-265-292.9-440.3c-259-318.8-609.7-605.7-862.8-705.4c-83.7-33.9-153.4-43.8-298.9-45.8c-171.4,0-201.3,6-318.8,61.8c-71.7,33.9-153.4,67.8-183.3,75.7C709.2-3451.2,498-3692.2,498-3915.4c0-183.3,125.5-340.7,376.6-474.2c155.4-83.7,294.9-97.6,540-55.8c805,139.5,1996.5,858.8,3387.3,2042.3c103.6,87.7,199.3,161.4,213.2,161.4c11.9,0,93.7-61.8,179.3-135.5c1564.1-1347,2982.8-2150,3698.1-2092.2c191.3,15.9,406.5,135.5,502.1,279c79.7,119.6,99.6,249.1,59.8,398.5c-73.7,292.9-231.1,366.6-500.1,233.1c-127.5-63.8-151.4-67.8-326.8-67.8c-157.4,0-209.2,10-310.8,51.8c-340.7,143.5-729.3,498.1-1042.1,952.4c-55.8,81.7-101.6,161.4-101.6,175.4c0,15.9,37.9,0,95.6-41.8c326.8-233.1,908.6-193.3,1478.5,99.6c462.3,239.1,811,571.8,998.2,954.4c105.6,215.2,139.5,358.7,151.4,621.7c13.9,277-15.9,492.1-103.6,755.2c-125.5,376.6-318.8,715.3-530,926.5c-221.2,221.2-416.4,314.8-567.9,273c-139.5-37.8-304.9-239.1-306.9-370.6c0-73.7,55.8-161.4,207.2-332.8c267-298.9,362.6-446.3,442.3-679.5c147.5-440.3-51.8-824.9-559.9-1076c-221.2-107.6-372.6-147.4-569.9-147.4c-721.3,0-1111.8,404.5-1115.8,1155.7c0,153.4,10,273,31.9,358.7c47.8,187.3,185.3,438.4,372.6,683.4c460.3,603.8,559.9,771.1,635.6,1070c37.9,151.4,41.9,205.2,31.9,498.1c-15.9,476.2-101.6,807-298.9,1159.6c-354.7,633.6-1072,1064-2000.5,1199.5C5244.2,4706.3,4606.6,4702.3,4313.7,4650.5z M4178.2,1024.1c127.5-47.8,243.1-217.2,245.1-356.7c0-95.6-73.7-233.1-163.4-306.8c-149.4-117.6-402.5-83.7-520,71.7c-143.5,187.3-83.7,464.3,121.5,573.8C3943.1,1048,4090.5,1057.9,4178.2,1024.1z M6150.8,1024.1c125.5-47.8,243.1-217.2,245.1-352.7c0-201.2-183.3-382.6-388.5-382.6c-280.9,0-464.3,304.8-338.7,557.9C5750.3,1006.1,5977.4,1089.8,6150.8,1024.1z\" /></g></g>\n        </svg>\n    )\n}\n\nexport default Squid","import React, { SVGProps } from 'react'\n\nconst Sound: React.FC<SVGProps<SVGSVGElement>> = (props) => {\n    return (\n        <svg width={props.width} viewBox=\"0 0 343 343\">\n            <path fill={props.fill} opacity=\"1.00\" d=\" M 148.52 28.55 C 154.92 22.23 165.03 18.34 173.65 22.36 C 181.83 26.02 185.36 35.47 185.21 43.93 C 185.22 127.61 185.21 211.29 185.22 294.98 C 185.17 301.27 184.34 307.81 181.12 313.33 C 178.00 318.63 172.17 322.34 165.95 322.33 C 159.03 322.43 152.78 318.57 147.97 313.89 C 121.03 287.13 94.27 260.17 67.25 233.49 C 51.55 233.50 35.85 233.57 20.15 233.46 C 10.41 233.43 1.64 225.76 0.00 216.22 L 0.00 126.89 C 1.55 117.29 10.39 109.57 20.16 109.54 C 35.84 109.42 51.52 109.52 67.20 109.50 C 94.41 82.62 121.34 55.46 148.52 28.55 M 163.07 34.94 C 160.35 36.02 158.16 38.06 156.08 40.06 C 129.07 67.02 102.04 93.97 75.02 120.93 C 73.21 122.81 71.12 124.48 69.72 126.70 C 68.68 128.97 68.55 131.52 68.51 133.97 C 68.53 158.99 68.53 184.01 68.51 209.02 C 68.53 212.37 68.83 216.16 71.53 218.52 C 100.03 246.97 128.55 275.41 157.08 303.83 C 159.85 306.32 163.48 309.74 167.51 308.33 C 171.00 305.81 171.34 300.90 171.52 296.95 C 171.58 212.61 171.52 128.28 171.55 43.95 C 171.58 40.88 171.21 37.39 168.77 35.23 C 167.22 33.80 164.86 34.32 163.07 34.94 M 13.99 130.96 C 13.82 156.63 14.00 182.31 13.91 207.99 C 13.94 210.25 13.84 212.56 14.39 214.78 C 15.33 217.48 18.06 219.32 20.93 219.20 C 32.72 219.33 44.53 219.21 56.33 219.25 C 54.65 214.02 54.94 208.49 54.94 203.07 C 54.94 182.03 54.94 160.99 54.93 139.94 C 54.94 134.52 54.65 128.98 56.33 123.75 C 44.54 123.79 32.74 123.68 20.95 123.79 C 17.04 123.54 13.72 127.12 13.99 130.96 Z\" />\n            <path fill={props.fill} opacity=\"1.00\" d=\" M 257.89 51.14 C 259.24 47.13 264.44 45.90 267.89 47.96 C 282.85 55.54 296.34 65.98 307.59 78.41 C 327.89 100.58 340.43 129.58 343.00 159.51 L 343.00 183.87 C 341.63 197.71 338.42 211.41 333.09 224.27 C 321.46 252.75 299.98 277.03 273.22 292.19 C 269.83 294.01 266.28 296.76 262.18 295.73 C 257.88 294.81 256.00 289.05 258.55 285.58 C 260.67 282.84 264.08 281.67 266.96 279.94 C 281.61 271.57 294.51 260.16 304.65 246.68 C 320.98 225.11 330.03 198.08 329.70 171.01 C 329.82 143.81 320.47 116.73 303.82 95.24 C 292.63 80.63 278.11 68.64 261.77 60.20 C 258.52 58.63 256.27 54.65 257.89 51.14 Z\" />\n            <path fill={props.fill} opacity=\"1.00\" d=\" M 236.28 84.29 C 238.74 82.78 241.72 83.51 244.07 84.86 C 263.21 95.49 278.63 112.66 287.13 132.84 C 296.66 155.22 297.46 181.17 289.44 204.12 C 281.68 226.67 265.39 246.08 244.65 257.81 C 242.42 259.09 239.59 260.14 237.12 258.82 C 233.40 257.39 231.98 252.40 234.09 249.10 C 235.95 246.48 239.06 245.30 241.67 243.59 C 258.22 233.07 270.99 216.71 277.03 198.04 C 282.75 180.68 282.66 161.52 276.77 144.20 C 270.20 124.47 256.09 107.38 237.97 97.18 C 235.95 96.00 233.74 94.51 233.14 92.11 C 232.03 89.21 233.58 85.71 236.28 84.29 Z\" />\n            <path fill={props.fill} opacity=\"1.00\" d=\" M 207.34 127.30 C 210.33 125.53 213.85 127.06 216.83 128.11 C 231.49 133.50 242.83 146.78 245.94 162.08 C 247.64 171.46 246.93 181.44 242.94 190.18 C 237.36 203.02 225.64 213.04 212.03 216.38 C 207.03 217.79 201.89 211.94 204.33 207.26 C 205.39 204.27 208.63 203.19 211.35 202.24 C 220.40 199.17 227.83 191.79 231.12 182.83 C 235.04 172.29 233.11 159.72 225.91 151.02 C 221.49 145.34 215.05 141.73 208.28 139.61 C 202.97 137.87 202.13 129.72 207.34 127.30 Z\" />\n        </svg>\n\n    )\n}\n\nexport default Sound","import React from 'react'\nimport { Squid } from '../images'\nimport './player.scss'\n\ninterface props {\n    image?: File | undefined\n    setImage: Function\n    name: string\n}\n\nconst PlayerIcon: React.FC<props> = (props) => {\n    return (\n        <div>\n            <input className=\"visually-hidden\" id={`${props.name}icon`} type=\"file\" accept=\"image/*\"\n                onChange={(e: any) => {\n                    props.setImage(e)\n                }}\n            />\n\n            {props.image\n                // eslint-disable-next-line\n                ? <img className=\"uploaded\" src={URL.createObjectURL(props.image)} onClick={() => document.getElementById(`${props.name}icon`)!.click()} />\n                // eslint-disable-next-line\n                : <Squid width=\"10vmax\" onClick={() => { document.getElementById(`${props.name}icon`)!.click() }} />}\n\n        </div>\n    )\n}\n\nexport default PlayerIcon","import React from 'react'\nimport Name from './Name'\nimport Input from './Input'\nimport PlayerIcon from './PlayerIcon'\nimport './player.scss'\n\ninterface PlayerProps {\n    name: string;\n    points: number;\n    setPoints: Function;\n    setImage: Function;\n    image?: File | undefined\n    pointsColour?: string\n}\n\nexport const Player: React.FC<PlayerProps> = (props) => {\n\n    return (\n        <table style={{ width: \"100%\", tableLayout: \"fixed\" }}>\n            <tbody>\n                <tr>\n                    <td style={{ width: \"25%\", textAlign:'start' }}>\n                        <PlayerIcon setImage={props.setImage} image={props.image} name={props.name} />\n                    </td>\n                    <td style={{ width: \"50%\", textAlign: \"center\", paddingLeft: \"5vmin\" }}>\n                        <Name name={props.name} />\n                    </td>\n                    <td style={{ width: \"25%\", textAlign:\"end\"}}>\n                        <Input pointsColour={props.pointsColour} points={props.points} setPoints={props.setPoints} name={props.name} />\n                    </td>\n                </tr>\n            </tbody>\n        </table>\n    );\n}","import React, { useContext } from \"react\";\nimport GlobalStore from \"./index\";\nimport { Player } from \"./Player/Player\";\nimport { observer } from \"mobx-react\";\n\nexport const Players: React.FC = observer(() => {\n  const store = useContext(GlobalStore).Players;\n  return (\n    <div>\n      {store.players\n        .slice()\n        .sort((a, b) => (a.points < b.points ? -1 : 1))\n        .map((player, i) => (\n          <Player\n            name={player.name}\n            points={player.points}\n            setPoints={player.addPoints}\n            key={i}\n            setImage={player.changeImage}\n            image={player.image}\n          />\n        ))}\n    </div>\n  );\n});\n","import React, { useContext } from 'react'\nimport './css/navbar.css'\nimport { Save, Resume, Sound } from './images'\nimport GlobalStore from './index'\nimport { observer } from 'mobx-react'\nimport * as Colours from './constants/colourConst'\n\nexport const NavBar = observer(() => {\n  const store = useContext(GlobalStore)\n  const iconPresets = {\n    width: \"6vmin\",\n    fill: Colours.iconColours\n  }\n\n  return (\n    <table className=\"navbar\">\n      <tr style={{ width: \"100%\" }}>\n        <td style={{ fontSize: \"4vh\", color: Colours.navbarText, width: \"25%\", textAlign: \"start\" }}>\n          <NavIcon label=\"№ Games\">\n            <div style={{ fontWeight: 'bold', fontSize: iconPresets.width }}>{store.GameStore.numberOfGames}</div>\n          </NavIcon>\n        </td>\n        <td style={{ margin: 'auto', width: \"50%\", textAlign: 'center' }}>\n          {store.Players.players.length > 0\n            ? <NavIcon label=\"Save\"><Save {...iconPresets} /></NavIcon>\n            : <NavIcon label=\"Resume\"> <Resume {...iconPresets} /></NavIcon>}\n        </td>\n        <td style={{ width: \"25%\", textAlign: 'end' }}>\n          <NavIcon label=\"Sound\"><Sound {...iconPresets} /></NavIcon>\n        </td>\n      </tr>\n    </table >\n  )\n})\n\ninterface props {\n  label?: string\n}\n\nconst NavIcon: React.FC<props> = (props) => {\n  return (\n    <div style={{ display: 'inline-grid', padding:'0vmin 2vmin'}}>\n      <div style={{ margin: 'auto' }}>{props.children}</div>\n      <div style={{ color: Colours.navbarText, marginTop: '-5px', fontSize: \"3.5vmin\", textAlign: \"center\" }}>{props.label}</div>\n    </div>\n  )\n}\n\nexport default NavIcon","const iconColours = \"#777777\"\nconst navbarText = \"#777777\"\n\nexport {\n    iconColours, navbarText\n}","import { observable, decorate, action } from 'mobx';\n\nexport class Player {\n    constructor(name: string) {\n        this.name = name\n    }\n\n    name: string;\n    points = 0;\n    gamesPlayed: number = 0;\n    image: File | undefined;\n    pointsHistory: Array<number> = []\n    pointsColour: string = \"#000000\"\n\n    addPoints(points: number) {\n        this.addToHistory(points)\n        this.points += points;\n    }\n\n    changePointsColour() {\n\n    }\n\n    addToHistory(points: number) {\n        this.pointsHistory.push(points)\n    }\n\n    changeImage(e: any) {\n        let file = e.target.files![0]\n        this.image = file\n    }\n}\ndecorate(Player, {\n    changeImage: action.bound,\n    addPoints: action.bound,\n    name: observable,\n    points: observable,\n    gamesPlayed: observable,\n    image: observable,\n})\n\nexport default class PlayerStore {\n    players: Array<Player> = []\n\n    addPlayer() {\n        var playerName = prompt('Please enter your name:', '')!\n\n        if (playerName && !this.playerExists(playerName)) {\n            this.players.push(new Player(playerName))\n        }\n        else {\n            return\n        }\n    }\n\n    playerExists(input: string) {\n        if (this.players.find((player) => player.name === input)) {\n            return true\n        }\n        else {\n            return false\n        }\n    }\n}\n\ndecorate(PlayerStore, {\n    players: observable,\n    addPlayer: action.bound\n})\n","export class GameStore {\n    numberOfGames: number = 0\n}","import PlayerStore from './PlayerStore'\nimport { GameStore } from './GameStore'\n\nclass GlobalStore {\n    Players: PlayerStore;\n    GameStore: GameStore;\n    constructor() {\n        this.Players = new PlayerStore()\n        this.GameStore = new GameStore()\n    }\n}\n\nlet store = new GlobalStore()\nexport default store","import React from \"react\";\nimport \"./css/App.css\";\nimport * as Colours from './constants/colourConst'\nimport { Players } from \"./Players\";\nimport { NavBar } from \"./NavBar\";\nimport { Plus } from \"./images\";\nimport store from \"./store\";\n\nexport interface PlayersContextInterface {\n  name: string;\n  points: number;\n  gamesPlayed: number;\n  image: File | undefined;\n}\n\nexport const App = () => {\n  return (\n    <div>\n      <div style={{ paddingBottom: \"10vmax\", overflow: \"scroll\" }}>\n        <Players />\n        <Plus className=\"add\" width={60} fill={Colours.iconColours} onClick={() => store.Players.addPlayer()} />\n      </div>\n      <NavBar />\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, { createContext } from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport GlobalStore from './store'\n\nexport default createContext(GlobalStore)\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}